-- Sequences
CREATE SEQUENCE CMS_ACCT_SEQ    START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;
CREATE SEQUENCE CMS_TXN_SEQ     START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;
CREATE SEQUENCE CMS_OUTBOX_SEQ  START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;
CREATE SEQUENCE CMS_ENTRY_SEQ   START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;
CREATE SEQUENCE CMS_PROC_SEQ    START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;

-- Tables
CREATE TABLE CMS_ACCOUNTS (
    ACCOUNT_ID        NUMBER(19)       PRIMARY KEY,
    CUSTOMER_ID       NUMBER(19)       NOT NULL,
    ACCOUNT_TYPE      VARCHAR2(20)     NOT NULL CHECK (ACCOUNT_TYPE IN ('ISSUER','MERCHANT')),
    STATUS            VARCHAR2(20)     NOT NULL CHECK (STATUS IN ('ACTIVE','BLOCKED','CLOSED')),
    AVAILABLE_BALANCE NUMBER(20,2)     DEFAULT 0 NOT NULL,
    RESERVED          NUMBER(20,2)     DEFAULT 0 NOT NULL,
    CREDIT_LIMIT      NUMBER(20,2)     NOT NULL,
    CREATED_AT        TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_AT        TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL
);

CREATE TABLE CMS_TRANSACTIONS (
    TRANSACTION_ID NUMBER(19)       PRIMARY KEY,
    TYPE           VARCHAR2(50)     NOT NULL CHECK (TYPE IN ('INBOUND','CAPTURE','COMPENSATION')),
    STATE          VARCHAR2(50)     NOT NULL CHECK (STATE IN ('PENDING','SUCCESS','FAILED')),
    ACCOUNT_ID     NUMBER(19),
    HOLD_ID        NUMBER(19),
    AMOUNT         NUMBER(20,2)     NOT NULL,
    CURRENCY       VARCHAR2(3)      DEFAULT 'USD' NOT NULL,
    MERCHANT_ID    NUMBER(19),
    CREATED_AT     TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_AT     TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL
);

CREATE TABLE CMS_TRANSACTION_ENTRIES (
    ENTRY_ID       NUMBER(19) PRIMARY KEY,
    TRANSACTION_ID NUMBER(19) NOT NULL,
    ACCOUNT_ID     NUMBER(19) NOT NULL,
    AMOUNT         NUMBER(20,2) NOT NULL
);

CREATE TABLE CMS_OUTBOX_EVENTS (
    EVENT_ID     NUMBER(19)       PRIMARY KEY,
    EVENT_TYPE   VARCHAR2(100)    NOT NULL,
    AGGREGATE_ID NUMBER(19),
    PAYLOAD      CLOB             NOT NULL,
    STATUS       VARCHAR2(20)     DEFAULT 'PENDING' NOT NULL CHECK (STATUS IN ('PENDING','PUBLISHED','FAILED')),
    CREATED_AT   TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    PUBLISHED_AT TIMESTAMP(6) WITH TIME ZONE
);

CREATE TABLE CMS_PROCESSED_EVENTS (
    EVENT_ID     VARCHAR2(100) PRIMARY KEY,
    PAYLOAD_HASH VARCHAR2(128),
    STATUS       VARCHAR2(20),
    PROCESSED_AT TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL
);

-- Triggers
CREATE OR REPLACE TRIGGER BI_CMS_ACCOUNTS
BEFORE INSERT ON CMS_ACCOUNTS
FOR EACH ROW
WHEN (NEW.ACCOUNT_ID IS NULL)
BEGIN
    :NEW.ACCOUNT_ID := CMS_ACCT_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_CMS_ACCOUNTS_UPD
BEFORE UPDATE ON CMS_ACCOUNTS
FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER BI_CMS_TRANSACTIONS
BEFORE INSERT ON CMS_TRANSACTIONS
FOR EACH ROW
WHEN (NEW.TRANSACTION_ID IS NULL)
BEGIN
    :NEW.TRANSACTION_ID := CMS_TXN_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_CMS_TRANSACTIONS_UPD
BEFORE UPDATE ON CMS_TRANSACTIONS
FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER BI_CMS_OUTBOX_EVENTS
BEFORE INSERT ON CMS_OUTBOX_EVENTS
FOR EACH ROW
WHEN (NEW.EVENT_ID IS NULL)
BEGIN
    :NEW.EVENT_ID := CMS_OUTBOX_SEQ.NEXTVAL;
END;
/

-- Indexes
CREATE INDEX IDX_CMS_ACCOUNTS_STATUS ON CMS_ACCOUNTS(STATUS);
CREATE INDEX IDX_CMS_TXN_ACCOUNT_STATE ON CMS_TRANSACTIONS(ACCOUNT_ID, STATE);
CREATE INDEX IDX_CMS_TXN_HOLD_ID ON CMS_TRANSACTIONS(HOLD_ID);
CREATE INDEX IDX_CMS_TXN_MERCHANT_ID ON CMS_TRANSACTIONS(MERCHANT_ID);
CREATE INDEX IDX_CMS_ENTRIES_ACCOUNT ON CMS_TRANSACTION_ENTRIES(ACCOUNT_ID);
CREATE INDEX IDX_CMS_OUTBOX_STATUS ON CMS_OUTBOX_EVENTS(STATUS);
CREATE INDEX IDX_CMS_OUTBOX_AGGREGATE_ID ON CMS_OUTBOX_EVENTS(AGGREGATE_ID);
CREATE INDEX IDX_CMS_PROC_STATUS ON CMS_PROCESSED_EVENTS(STATUS);

-- Foreign Keys
ALTER TABLE CMS_TRANSACTIONS ADD CONSTRAINT FK_CMS_TXN_MERCHANT_ACCOUNT 
    FOREIGN KEY (MERCHANT_ID) REFERENCES CMS_ACCOUNTS(ACCOUNT_ID);